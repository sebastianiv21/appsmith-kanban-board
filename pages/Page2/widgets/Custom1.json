{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 45,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{{{data: JSObject1.getData()}}}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicTriggerPathList": [
    {
      "key": "onResetClick"
    }
  ],
  "events": [
    "onResetClick"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "tpdhb5u6q7",
  "leftColumn": 15,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 45,
  "mobileLeftColumn": 15,
  "mobileRightColumn": 38,
  "mobileTopRow": 15,
  "needsErrorInfo": false,
  "onResetClick": "{{showAlert('Successfully reset!!', '');}}",
  "parentColumnSpace": 20.3125,
  "parentId": "0",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 38,
  "srcDoc": {
    "css": ".app {\n  height: calc(var(--appsmith-ui-height) * 1px);\n  width: calc(var(--appsmith-ui-width) * 1px);\n  justify-content: center;\n  border-radius: var(--appsmith-theme-borderRadius);\n  box-shadow: var(--appsmith-theme-boxShadow);\n  padding: 29px 25px;\n  box-sizing: border-box;\n  font-family: system-ui;\n  background: #fff;\n}\n\n.tip-container {\n  margin-bottom: 20px;\n  font-size: 14px;\n  line-height: 1.571429;\n}\n\n.tip-container h2 {\n  margin-bottom: 20px;\n  font-size: 16px;\n  font-weight: 700;\n}\n\n.tip-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: baseline;\n  margin-bottom: 9px;\n}\n\n.tip-header div {\n  color: #999;\n}\n\n.content {\n  white-space: pre-wrap;\n  word-break: break-word;\n  font-size: 14px;\n  line-height: 1.571429;\n}\n\n.button-container {\n  text-align: right;\n  padding-top: 4px;\n}\n\n.button-container button {\n  margin: 0 10px;\n  cursor: pointer;\n  border-radius: var(--appsmith-theme-borderRadius);\n  padding: 6px 16px;\n  background: none;\n  height: auto;\n  transition: all 0.3s ease;\n}\n\n.button-container button.primary {\n  background: var(--appsmith-theme-primaryColor) !important;\n  color: #fff;\n  border: 1px solid var(--appsmith-theme-primaryColor) !important;\n}\n\n.button-container button.reset {\n  border: 1px solid #999;\n  color: #999;\n  outline: none;\n  box-shadow: none;\n}\n\n.button-container button.reset:hover:not(:disabled) {\n  color: var(--appsmith-theme-primaryColor);\n  border-color: var(--appsmith-theme-primaryColor);\n}\n\n.button-container button.reset:disabled {\n  cursor: default;\n}",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport React from \"https://esm.sh/react@19.1.0\";\nimport { createRoot } from \"https://esm.sh/react-dom@19.1.0/client\";\nimport { DragDropContext, Droppable, Draggable } from \"https://esm.sh/@hello-pangea/dnd@18.0.1\";\nconst Task = ({\n  task,\n  index\n}) => {\n  return /*#__PURE__*/React.createElement(Draggable, {\n    draggableId: task.id,\n    index: index\n  }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: provided.innerRef\n  }, provided.draggableProps, provided.dragHandleProps, {\n    isDragging: snapshot.isDragging\n  }), task.content));\n};\nconst Column = ({\n  column,\n  tasks,\n  index\n}) => {\n  return /*#__PURE__*/React.createElement(Draggable, {\n    draggableId: column.id,\n    index: index\n  }, provided => /*#__PURE__*/React.createElement(\"div\", _extends({}, provided.draggableProps, {\n    ref: provided.innerRef\n  }), /*#__PURE__*/React.createElement(\"h3\", provided.dragHandleProps, column.title), /*#__PURE__*/React.createElement(Droppable, {\n    droppableId: column.id,\n    type: \"task\"\n  }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: provided.innerRef\n  }, provided.droppableProps, {\n    isDraggingOver: snapshot.isDraggingOver\n  }), tasks.map((task, index) => /*#__PURE__*/React.createElement(Task, {\n    key: task.id,\n    task: task,\n    index: index\n  })), provided.placeholder))));\n};\nfunction App() {\n  const [data, setData] = React.useState(appsmith.model.data);\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId,\n      type\n    } = result;\n    if (!destination) return;\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n    if (type === \"column\") {\n      const newColumnOrder = Array.from(data.columnOrder);\n      newColumnOrder.splice(source.index, 1);\n      newColumnOrder.splice(destination.index, 0, draggableId);\n      setData(prev => ({\n        ...prev,\n        columnOrder: newColumnOrder\n      }));\n      return;\n    }\n    const start = data.columns[source.droppableId];\n    const finish = data.columns[destination.droppableId];\n\n    // moving items in the same column\n    if (start === finish) {\n      const newTasksIds = Array.from(start.taskIds);\n\n      // reorder the column items\n      newTasksIds.splice(source.index, 1);\n      newTasksIds.splice(destination.index, 0, draggableId);\n      const newColumn = {\n        ...start,\n        taskIds: newTasksIds\n      };\n      setData(prev => ({\n        ...prev,\n        columns: {\n          ...prev.columns,\n          [newColumn.id]: newColumn\n        }\n      }));\n      return;\n    }\n\n    // moving from one column to another\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds\n    };\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId);\n    const newFinish = {\n      ...finish,\n      taskIds: finishTaskIds\n    };\n    setData(prev => ({\n      ...prev,\n      columns: {\n        ...prev.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish\n      }\n    }));\n  };\n  return /*#__PURE__*/React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd\n  }, /*#__PURE__*/React.createElement(Droppable, {\n    droppableId: \"all-columns\",\n    direction: \"horizontal\",\n    type: \"column\"\n  }, provided => /*#__PURE__*/React.createElement(\"div\", _extends({}, provided.droppableProps, {\n    ref: provided.innerRef\n  }), data.columnOrder.map((colId, index) => {\n    const column = data.columns[colId];\n    const tasks = column.taskIds.map(taskId => data.tasks[taskId]);\n    return /*#__PURE__*/React.createElement(Column, {\n      key: column.id,\n      column: column,\n      tasks: tasks,\n      index: index\n    });\n  }), provided.placeholder)));\n}\nappsmith.onReady(() => {\n  /*\n   * This handler function will get called when parent application is ready.\n   * Initialize your component here\n   * more info - https://docs.appsmith.com/reference/widgets/custom#onready\n   */\n  createRoot(document.getElementById(\"root\")).render(/*#__PURE__*/React.createElement(App, null));\n});"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 15,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": ".app {\n  height: calc(var(--appsmith-ui-height) * 1px);\n  width: calc(var(--appsmith-ui-width) * 1px);\n  justify-content: center;\n  border-radius: var(--appsmith-theme-borderRadius);\n  box-shadow: var(--appsmith-theme-boxShadow);\n  padding: 29px 25px;\n  box-sizing: border-box;\n  font-family: system-ui;\n  background: #fff;\n}\n\n.tip-container {\n  margin-bottom: 20px;\n  font-size: 14px;\n  line-height: 1.571429;\n}\n\n.tip-container h2 {\n  margin-bottom: 20px;\n  font-size: 16px;\n  font-weight: 700;\n}\n\n.tip-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: baseline;\n  margin-bottom: 9px;\n}\n\n.tip-header div {\n  color: #999;\n}\n\n.content {\n  white-space: pre-wrap;\n  word-break: break-word;\n  font-size: 14px;\n  line-height: 1.571429;\n}\n\n.button-container {\n  text-align: right;\n  padding-top: 4px;\n}\n\n.button-container button {\n  margin: 0 10px;\n  cursor: pointer;\n  border-radius: var(--appsmith-theme-borderRadius);\n  padding: 6px 16px;\n  background: none;\n  height: auto;\n  transition: all 0.3s ease;\n}\n\n.button-container button.primary {\n  background: var(--appsmith-theme-primaryColor) !important;\n  color: #fff;\n  border: 1px solid var(--appsmith-theme-primaryColor) !important;\n}\n\n.button-container button.reset {\n  border: 1px solid #999;\n  color: #999;\n  outline: none;\n  box-shadow: none;\n}\n\n.button-container button.reset:hover:not(:disabled) {\n  color: var(--appsmith-theme-primaryColor);\n  border-color: var(--appsmith-theme-primaryColor);\n}\n\n.button-container button.reset:disabled {\n  cursor: default;\n}",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "import React from \"https://esm.sh/react@19.1.0\";\nimport {createRoot} from \"https://esm.sh/react-dom@19.1.0/client\";\nimport { DragDropContext, Droppable, Draggable } from \"https://esm.sh/@hello-pangea/dnd@18.0.1\";\n\nconst Task = ({ task, index }) => {\n  return (\n    <Draggable draggableId={task.id} index={index}>\n      {(provided, snapshot) => (\n        <div\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          isDragging={snapshot.isDragging}\n        >\n          {task.content}\n        </div>\n      )}\n    </Draggable>\n  );\n};\n\nconst Column = ({ column, tasks, index }) => {\n  return (\n    <Draggable draggableId={column.id} index={index}>\n      {(provided) => (\n        <div {...provided.draggableProps} ref={provided.innerRef}>\n          <h3 {...provided.dragHandleProps}>{column.title}</h3>\n          <Droppable droppableId={column.id} type=\"task\">\n            {(provided, snapshot) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                isDraggingOver={snapshot.isDraggingOver}\n              >\n                {tasks.map((task, index) => (\n                  <Task key={task.id} task={task} index={index} />\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </div>\n      )}\n    </Draggable>\n  );\n};\n\nfunction App() {\n    const [data, setData] = React.useState(appsmith.model.data);\n\n  const onDragEnd = (result) => {\n    const { destination, source, draggableId, type } = result;\n\n    if (!destination) return;\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    if (type === \"column\") {\n      const newColumnOrder = Array.from(data.columnOrder);\n      newColumnOrder.splice(source.index, 1);\n      newColumnOrder.splice(destination.index, 0, draggableId);\n\n      setData((prev) => ({\n        ...prev,\n        columnOrder: newColumnOrder,\n      }));\n      return;\n    }\n\n    const start = data.columns[source.droppableId];\n    const finish = data.columns[destination.droppableId];\n\n    // moving items in the same column\n    if (start === finish) {\n      const newTasksIds = Array.from(start.taskIds);\n\n      // reorder the column items\n      newTasksIds.splice(source.index, 1);\n      newTasksIds.splice(destination.index, 0, draggableId);\n\n      const newColumn = {\n        ...start,\n        taskIds: newTasksIds,\n      };\n\n      setData((prev) => ({\n        ...prev,\n        columns: {\n          ...prev.columns,\n          [newColumn.id]: newColumn,\n        },\n      }));\n      return;\n    }\n\n    // moving from one column to another\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds,\n    };\n\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId);\n    const newFinish = {\n      ...finish,\n      taskIds: finishTaskIds,\n    };\n\n    setData((prev) => ({\n      ...prev,\n      columns: {\n        ...prev.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish,\n      },\n    }));\n  };\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Droppable droppableId=\"all-columns\" direction=\"horizontal\" type=\"column\">\n        {(provided) => (\n          <div {...provided.droppableProps} ref={provided.innerRef}>\n            {data.columnOrder.map((colId, index) => {\n              const column = data.columns[colId];\n              const tasks = column.taskIds.map((taskId) => data.tasks[taskId]);\n\n              return (\n                <Column\n                  key={column.id}\n                  column={column}\n                  tasks={tasks}\n                  index={index}\n                />\n              );\n            })}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n\n}\n\nappsmith.onReady(() => {\n\t/*\n\t * This handler function will get called when parent application is ready.\n\t * Initialize your component here\n\t * more info - https://docs.appsmith.com/reference/widgets/custom#onready\n\t */\n\tcreateRoot(document.getElementById(\"root\")).render(<App />);\n});"
  },
  "version": 1,
  "widgetId": "s0mk6m0eth",
  "widgetName": "Custom1"
}