{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 66,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{{\n{\n\t\"data\": DataBoardUtils.createBoardData(),\n\t\"color_utils\": ColorUtils,\n\t\"ticket_constants\": TicketConstants,\n\t\"image_links\": ImageLinks\n}\n}}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicTriggerPathList": [
    {
      "key": "onResetClick"
    }
  ],
  "events": [
    "onResetClick"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "qtteuhh07d",
  "leftColumn": 0,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 31,
  "mobileLeftColumn": 0,
  "mobileRightColumn": 23,
  "mobileTopRow": 1,
  "needsErrorInfo": false,
  "onResetClick": "{{showAlert('Successfully reset!!', '');}}",
  "parentColumnSpace": 20.3125,
  "parentId": "0",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 64,
  "srcDoc": {
    "css": "/* General page style */\nbody {\n  font-family: \"Segoe UI\", Tahoma, Geneva, Verdana, sans-serif;\n  background-color: var(--appsmith-theme-backgroundColor);\n}\n\n.main-container {\n  display: flex;\n  gap: 8px;\n}\n\n.column {\n  background-color: #eee;\n  border: 1px solid lightgrey;\n  border-radius: 8px;\n  padding: 10px;\n  width: 250px;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n/* Column title */\n.column h3 {\n  padding: 8px;\n  user-select: none;\n}\n\n.ticket-list {\n  padding: 8px;\n  transition: background-color 0.2s ease;\n  display: flex;\n  flex-direction: column;\n  min-height: 100px;\n  background-color: inherit;\n  gap: 8px;\n}\n\n.ticket {\n  background-color: #ffffff;\n  border-radius: 8px;\n  padding: 10px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  user-select: none;\n  transition: outline 0.2s ease;\n}\n\n/* Avatar and text container */\n.ticket-header {\n  display: flex;\n  justify-content: space-between;\n}\n\n.created-at {\n  font-size: 12px;\n  color: #726e6e;\n}\n\n/* Round avatar */\n.ticket-origin {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n}\n\n.ticket-text {\n  font-size: 16px;\n  font-weight: 500;\n}\n\n.ticket-footer {\n  display: flex;\n  justify-content: space-between;\n  gap: 6px;\n  align-items: center;\n  font-size: 12px;\n}\n\n.ticket-label {\n  background-color: #e2d9f3;\n  padding: 3px 8px;\n  border-radius: 8px;\n}\n\n.support-tier {\n  font-size: 12px;\n}",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport React from \"https://esm.sh/react@19.1.0\";\nimport { createRoot } from \"https://esm.sh/react-dom@19.1.0/client\";\nimport { DragDropContext, Droppable, Draggable } from \"https://esm.sh/@hello-pangea/dnd@18.0.1\";\nconst initialColumns = {\n  ai_agents: {\n    id: 1,\n    name: \"AI Agents\",\n    description: \"Responsible for the new AI Agent/Assistance builder\",\n    items: []\n  },\n  query_and_widgets: {\n    id: 2,\n    name: \"Query&Widgets\",\n    description: \"Responsible for the developer experience, data sources, queries, JS, Widgets, Templates, Evaluation, and bindings.\",\n    items: []\n  },\n  git_and_packages: {\n    id: 3,\n    name: \"Git&Packages\",\n    description: \"Responsible for Git integration, Import/Export of Apps and Packages/Modules\",\n    items: []\n  },\n  chat_extension: {\n    id: 4,\n    name: \"Chat Extension\",\n    description: \"This is the old Workflow team. They are working on a new AI experience, but every workflow issue should go to this team.\",\n    items: []\n  },\n  platform_admin: {\n    id: 5,\n    name: \"Platform Admin\",\n    description: \"They are responsible for all the Admin Settings, Billing, Audit Logs, and SSO integrations.\",\n    items: []\n  },\n  perf_and_observability: {\n    id: 6,\n    name: \"Performance&Observability\",\n    description: \"Responsible for ensuring system performance, monitoring, reliability, and application observability to maintain optimal user experience.\",\n    items: []\n  },\n  devops: {\n    id: 7,\n    name: \"DevOps\",\n    description: \"Handles the infrastructure, CI/CD pipelines, deployment automation, and system reliability to support continuous development and operations.\",\n    items: []\n  }\n};\nconst getTicketStyle = (isDragging, draggableStyles) => ({\n  outline: isDragging ? \"2px solid #000\" : \"inherit\",\n  ...draggableStyles\n});\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? `${appsmith.theme.primaryColor}` : \"inherit\",\n  opacity: isDraggingOver ? 0.3 : 1\n});\nfunction Ticket({\n  ticket,\n  index\n}) {\n  const origin = appsmith.model.image_links.logMaps[ticket[\"origin\"]];\n  const supportLevel = appsmith.model.ticket_constants.supportTiers[ticket[\"support_level\"]] ?? \"N/A\";\n  const severityLabelStyle = {\n    backgroundColor: appsmith.model.color_utils.severityColors[ticket.severity || \"na\"]\n  };\n  const supportTierLabelStyle = {\n    backgroundColor: appsmith.model.color_utils.tierColors[ticket.support_level || \"na\"]\n  };\n  const ticketText = ticket.subject.length >= 50 ? `${ticket.subject.substring(0, 50)}...` : ticket.subject;\n  return /*#__PURE__*/React.createElement(Draggable, {\n    draggableId: ticket.id,\n    index: index\n  }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: \"ticket\",\n    ref: provided.innerRef\n  }, provided.draggableProps, provided.dragHandleProps, {\n    style: getTicketStyle(snapshot.isDragging, provided.draggableProps.style)\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ticket-header\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"created-at\"\n  }, ticket.created_at), /*#__PURE__*/React.createElement(\"div\", null, \"\\xB1\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ticket-body\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ticket-text\"\n  }, ticketText)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ticket-footer\"\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: origin,\n    className: \"ticket-origin\"\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"ticket-label\",\n    style: severityLabelStyle\n  }, ticket.severity), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"ticket-label\",\n    style: supportTierLabelStyle\n  }, supportLevel))));\n}\n;\nfunction Column({\n  column,\n  tickets,\n  index\n}) {\n  return /*#__PURE__*/React.createElement(Draggable, {\n    draggableId: column.id,\n    index: index\n  }, provided => /*#__PURE__*/React.createElement(\"section\", _extends({\n    className: \"column\"\n  }, provided.draggableProps, {\n    ref: provided.innerRef\n  }), /*#__PURE__*/React.createElement(\"h3\", provided.dragHandleProps, column.title, \" (\", tickets.length, \")\"), /*#__PURE__*/React.createElement(Droppable, {\n    droppableId: column.id,\n    type: \"ticket\"\n  }, (provided, snapshot) => {\n    return /*#__PURE__*/React.createElement(\"div\", _extends({\n      className: \"ticket-list\",\n      ref: provided.innerRef\n    }, provided.droppableProps), tickets.map((ticket, index) => /*#__PURE__*/React.createElement(Ticket, {\n      key: ticket.id,\n      ticket: ticket,\n      index: index\n    })), provided.placeholder);\n  })));\n}\n;\nfunction App() {\n  const [data, setData] = React.useState(appsmith.model.data);\n  function onDragEnd(result) {\n    const {\n      destination,\n      source,\n      draggableId,\n      type\n    } = result;\n    if (!destination) return;\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n    if (type === \"column\") {\n      const newColumnOrder = Array.from(data.columnOrder);\n      newColumnOrder.splice(source.index, 1);\n      newColumnOrder.splice(destination.index, 0, draggableId);\n      setData(prev => ({\n        ...prev,\n        columnOrder: newColumnOrder\n      }));\n      return;\n    }\n    const start = data.columns[source.droppableId];\n    const finish = data.columns[destination.droppableId];\n\n    // moving items in the same column\n    if (start === finish) {\n      const newTicketsIds = Array.from(start.ticketIds);\n\n      // reorder the column items\n      newTicketsIds.splice(source.index, 1);\n      newTicketsIds.splice(destination.index, 0, draggableId);\n      const newColumn = {\n        ...start,\n        ticketIds: newTicketsIds\n      };\n      setData(prev => ({\n        ...prev,\n        columns: {\n          ...prev.columns,\n          [newColumn.id]: newColumn\n        }\n      }));\n      return;\n    } else {\n      // prevents changing a ticket to another column\n      return;\n    }\n\n    // moving from one column to another\n    const startTicketIds = Array.from(start.ticketIds);\n    startTicketIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      ticketIds: startTicketIds\n    };\n    const finishTicketIds = Array.from(finish.ticketIds);\n    finishTicketIds.splice(destination.index, 0, draggableId);\n    const newFinish = {\n      ...finish,\n      ticketIds: finishTicketIds\n    };\n    setData(prev => ({\n      ...prev,\n      columns: {\n        ...prev.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish\n      }\n    }));\n  }\n  return /*#__PURE__*/React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd\n  }, /*#__PURE__*/React.createElement(Droppable, {\n    droppableId: \"all-columns\",\n    direction: \"horizontal\",\n    type: \"column\"\n  }, provided => /*#__PURE__*/React.createElement(\"main\", _extends({\n    className: \"main-container\"\n  }, provided.droppableProps, {\n    ref: provided.innerRef\n  }), data.columnOrder.map((colId, index) => {\n    const column = data.columns[colId];\n    const tickets = column.ticketIds.map(ticketId => data.tickets[ticketId]);\n    return /*#__PURE__*/React.createElement(Column, {\n      key: column.id,\n      column: column,\n      tickets: tickets,\n      index: index\n    });\n  }), provided.placeholder)));\n}\nappsmith.onReady(() => {\n  /*\n   * This handler function will get called when parent application is ready.\n   * Initialize your component here\n   * more info - https://docs.appsmith.com/reference/widgets/custom#onready\n   */\n  createRoot(document.getElementById(\"root\")).render(/*#__PURE__*/React.createElement(App, null));\n});"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 10,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": "/* General page style */\nbody {\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  background-color: var(--appsmith-theme-backgroundColor);\n  //margin: 0;\n  //padding: 20px;\n  //display: flex;\n  //gap: 20px;\n  //flex-wrap: wrap;\n}\n\n.main-container {\n\tdisplay: flex;\n\tgap: 8px;\n}\n\n.column {\n  background-color:  #eee;\n\tborder: 1px solid lightgrey;\n  border-radius: 8px;\n  padding: 10px;\n  width: 250px;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n/* Column title */\n.column h3 {\n  padding: 8px;\n\tuser-select: none;\n}\n\n.ticket-list {\n\tpadding: 8px;\n\ttransition: background-color 0.2s ease;\n\tdisplay: flex;\n\tflex-direction: column;\n\t//flex-grow: 1;\n\tmin-height: 100px;\n\tbackground-color: inherit;\n\tgap: 8px;\n}\n\n.ticket {\n  background-color: #ffffff;\n  border-radius: 8px;\n  padding: 10px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n\tuser-select: none;\n\ttransition: outline 0.2s ease;\n}\n\n/* Avatar and text container */\n.ticket-header {\n  display: flex;\n  justify-content: space-between;\n}\n\n.created-at {\n\tfont-size: 12px;\n\tcolor: #726e6e;\n}\n\n/* Round avatar */\n.ticket-origin {\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n}\n\n.ticket-text {\n  font-size: 16px;\n  font-weight: 500;\n}\n\n.ticket-footer {\n\tdisplay: flex;\n\tjustify-content: space-between;\n\tgap: 6px;\n\talign-items: center;\n\tfont-size: 12px;\n}\n\n.ticket-label {\n  background-color: #e2d9f3;\n  padding: 3px 8px;\n  border-radius: 8px;\n  //width: fit-content;\n}\n\n.support-tier {\n  font-size: 12px;\n}\n",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "import React from \"https://esm.sh/react@19.1.0\";\nimport {createRoot} from \"https://esm.sh/react-dom@19.1.0/client\";\nimport { DragDropContext, Droppable, Draggable } from \"https://esm.sh/@hello-pangea/dnd@18.0.1\";\n\nconst initialColumns = {\n    ai_agents: {\n      id: 1,\n      name: \"AI Agents\",\n      description: \"Responsible for the new AI Agent/Assistance builder\",\n\t\t\titems: []\n    },\n    query_and_widgets: {\n      id: 2,\n      name: \"Query&Widgets\",\n      description: \"Responsible for the developer experience, data sources, queries, JS, Widgets, Templates, Evaluation, and bindings.\",\n\t\t\titems: []\n    },\n    git_and_packages: {\n      id: 3,\n      name: \"Git&Packages\",\n      description: \"Responsible for Git integration, Import/Export of Apps and Packages/Modules\",\n\t\t\titems: []\n    },\n    chat_extension: {\n      id: 4,\n      name: \"Chat Extension\",\n      description: \"This is the old Workflow team. They are working on a new AI experience, but every workflow issue should go to this team.\",\n\t\t\titems: []\n    },\n    platform_admin: {\n      id: 5,\n      name: \"Platform Admin\",\n      description: \"They are responsible for all the Admin Settings, Billing, Audit Logs, and SSO integrations.\",\n\t\t\titems: []\n    },\n    perf_and_observability: {\n      id: 6,\n      name: \"Performance&Observability\",\n      description: \"Responsible for ensuring system performance, monitoring, reliability, and application observability to maintain optimal user experience.\",\n\t\t\titems: []\n    },\n    devops: {\n      id: 7,\n      name: \"DevOps\",\n      description: \"Handles the infrastructure, CI/CD pipelines, deployment automation, and system reliability to support continuous development and operations.\",\n\t\t\titems: []\n    }\n};\n\nconst getTicketStyle = (isDragging, draggableStyles) => ({\n  outline: isDragging ? \"2px solid #000\" : \"inherit\",\n\t...draggableStyles\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? `${appsmith.theme.primaryColor}` : \"inherit\",\n\topacity: isDraggingOver ? 0.3 : 1\n});\n\nfunction Ticket({ ticket, index }) {\n\tconst origin = appsmith.model.image_links.logMaps[ticket[\"origin\"]]\n\tconst supportLevel = appsmith.model.ticket_constants.supportTiers[ticket[\"support_level\"]] ?? \"N/A\";\n\tconst severityLabelStyle = {\n\t\tbackgroundColor: appsmith.model.color_utils.severityColors[ticket.severity || \"na\"]\n\t}\n\tconst supportTierLabelStyle = {\n\t\tbackgroundColor: appsmith.model.color_utils.tierColors[ticket.support_level || \"na\"]\n\t}\n\tconst ticketText = ticket.subject.length >=50 ? `${ticket.subject.substring(0,50)}...` : ticket.subject;\n\n  return (\n    <Draggable draggableId={ticket.id} index={index}>\n      {(provided, snapshot) => (\n        <div\n\t\t\t\t\tclassName=\"ticket\"\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          style={getTicketStyle(snapshot.isDragging,provided.draggableProps.style)}\n        >\n\t\t\t\t\t\t<div className=\"ticket-header\">\n\t\t\t\t\t\t\t<div className=\"created-at\">{ticket.created_at}</div>\n\t\t\t\t\t\t\t<div>±</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"ticket-body\">\n\t\t\t\t\t\t\t<div className=\"ticket-text\">{ticketText}</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"ticket-footer\">\n\t\t\t\t\t\t\t<img src={origin} className=\"ticket-origin\" />\n\t\t\t\t\t\t\t<div class=\"ticket-label\" style={severityLabelStyle}>{ticket.severity}</div>\n    \t\t\t\t\t<div class=\"ticket-label\" style={supportTierLabelStyle}>{supportLevel}</div>\n\t\t\t\t\t\t</div>\n        </div>\n      )}\n    </Draggable>\n  );\n};\n\nfunction Column({ column, tickets, index }) {\n  return (\n    <Draggable draggableId={column.id} index={index}>\n      {(provided) => (\n        <section className=\"column\" {...provided.draggableProps} ref={provided.innerRef}>\n          <h3 {...provided.dragHandleProps}>{column.title} ({tickets.length})</h3>\n          <Droppable droppableId={column.id} type=\"ticket\">\n            {(provided, snapshot) => {\n\t\t\t\t\t\t\treturn (\n              <div\n\t\t\t\t\t\t\t\tclassName=\"ticket-list\"\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n              >\n                {tickets.map((ticket, index) => (\n                  <Ticket key={ticket.id} ticket={ticket} index={index} />\n                ))}\n                {provided.placeholder}\n              </div>\n            )}}\n          </Droppable>\n        </section>\n      )}\n    </Draggable>\n  );\n};\n\nfunction App() {\n  const [data, setData] = React.useState(appsmith.model.data);\n\n  function onDragEnd(result) {\n    const { destination, source, draggableId, type } = result;\n\n    if (!destination) return;\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    if (type === \"column\") {\n      const newColumnOrder = Array.from(data.columnOrder);\n      newColumnOrder.splice(source.index, 1);\n      newColumnOrder.splice(destination.index, 0, draggableId);\n\n      setData((prev) => ({\n        ...prev,\n        columnOrder: newColumnOrder,\n      }));\n      return;\n    }\n\n    const start = data.columns[source.droppableId];\n    const finish = data.columns[destination.droppableId];\n\n    // moving items in the same column\n    if (start === finish) {\n      const newTicketsIds = Array.from(start.ticketIds);\n\n      // reorder the column items\n      newTicketsIds.splice(source.index, 1);\n      newTicketsIds.splice(destination.index, 0, draggableId);\n\n      const newColumn = {\n        ...start,\n        ticketIds: newTicketsIds,\n      };\n\n      setData((prev) => ({\n        ...prev,\n        columns: {\n          ...prev.columns,\n          [newColumn.id]: newColumn,\n        },\n      }));\n      return;\n    } else {\n\t\t\t// prevents changing a ticket to another column\n\t\t\treturn;\n\t\t}\n\n    // moving from one column to another\n    const startTicketIds = Array.from(start.ticketIds);\n    startTicketIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      ticketIds: startTicketIds,\n    };\n\n    const finishTicketIds = Array.from(finish.ticketIds);\n    finishTicketIds.splice(destination.index, 0, draggableId);\n    const newFinish = {\n      ...finish,\n      ticketIds: finishTicketIds,\n    };\n\n    setData((prev) => ({\n      ...prev,\n      columns: {\n        ...prev.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish,\n      },\n    }));\n  }\n\n  return (\n      <DragDropContext onDragEnd={onDragEnd}>\n      <Droppable droppableId=\"all-columns\" direction=\"horizontal\" type=\"column\">\n        {(provided) => (\n          <main className=\"main-container\" {...provided.droppableProps} ref={provided.innerRef}>\n            {data.columnOrder.map((colId, index) => {\n              const column = data.columns[colId];\n              const tickets = column.ticketIds.map((ticketId) => data.tickets[ticketId]);\n\n              return (\n                <Column\n                  key={column.id}\n                  column={column}\n                  tickets={tickets}\n                  index={index}\n                />\n              );\n            })}\n            {provided.placeholder}\n          </main>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n}\n\nappsmith.onReady(() => {\n\t/*\n\t * This handler function will get called when parent application is ready.\n\t * Initialize your component here\n\t * more info - https://docs.appsmith.com/reference/widgets/custom#onready\n\t */\n\tcreateRoot(document.getElementById(\"root\")).render(<App />);\n});"
  },
  "version": 1,
  "widgetId": "5gn7lu5cc6",
  "widgetName": "kanban_board"
}