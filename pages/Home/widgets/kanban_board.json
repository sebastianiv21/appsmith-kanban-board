{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 66,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{{\n{\n\"tickets\": ticket_list.data,\n\"product_areas\": ticket_product_areas.data,\n\t\"color_utils\": ColorUtils,\n\t\"ticket_constants\": TicketConstants\n}\n}}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicTriggerPathList": [
    {
      "key": "onResetClick"
    }
  ],
  "events": [
    "onResetClick"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "qtteuhh07d",
  "leftColumn": 0,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 31,
  "mobileLeftColumn": 0,
  "mobileRightColumn": 23,
  "mobileTopRow": 1,
  "needsErrorInfo": false,
  "onResetClick": "{{showAlert('Successfully reset!!', '');}}",
  "parentColumnSpace": 20.3125,
  "parentId": "0",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 64,
  "srcDoc": {
    "css": "/* General page style */\nbody {\n  font-family: \"Segoe UI\", Tahoma, Geneva, Verdana, sans-serif;\n  margin: 0;\n  padding: 20px;\n  display: flex;\n  gap: 20px;\n  flex-wrap: wrap;\n}\n\n.column {\n  background-color: #eee;\n  border-radius: 8px;\n  padding: 10px;\n  width: 250px;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n/* Column title */\n.column h2 {\n  margin: 0;\n  font-size: 20px;\n  font-weight: 700;\n}\n\n.card {\n  background-color: #ffffff;\n  border-radius: 8px;\n  padding: 10px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  user-select: none;\n}\n\n/* Avatar and quote container */\n.card-header {\n  display: flex;\n  align-items: flex-start;\n  gap: 10px;\n}\n\n/* Round avatar */\n.avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n}\n\n/* Quote text */\n.quote {\n  font-size: 16px;\n  font-weight: 500;\n  color: #1e1e1e;\n}\n\n.severity-label {\n  font-size: 14px;\n  padding: 3px 8px;\n  border-radius: 6px;\n  width: fit-content;\n  align-self: flex-start;\n}\n\n/* ID in the bottom-right */\n.card-id {\n  font-size: 12px;\n  align-self: flex-end;\n}",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport React from \"https://esm.sh/react@19.1.0\";\nimport { createRoot } from \"https://esm.sh/react-dom@19.1.0/client\";\nimport { DragDropContext, Droppable, Draggable } from \"https://esm.sh/@hello-pangea/dnd@18.0.1\";\nconst initialColumns = {\n  ai_agents: {\n    id: 1,\n    name: \"AI Agents\",\n    description: \"Responsible for the new AI Agent/Assistance builder\",\n    items: []\n  },\n  query_and_widgets: {\n    id: 2,\n    name: \"Query&Widgets\",\n    description: \"Responsible for the developer experience, data sources, queries, JS, Widgets, Templates, Evaluation, and bindings.\",\n    items: []\n  },\n  git_and_packages: {\n    id: 3,\n    name: \"Git&Packages\",\n    description: \"Responsible for Git integration, Import/Export of Apps and Packages/Modules\",\n    items: []\n  },\n  chat_extension: {\n    id: 4,\n    name: \"Chat Extension\",\n    description: \"This is the old Workflow team. They are working on a new AI experience, but every workflow issue should go to this team.\",\n    items: []\n  },\n  platform_admin: {\n    id: 5,\n    name: \"Platform Admin\",\n    description: \"They are responsible for all the Admin Settings, Billing, Audit Logs, and SSO integrations.\",\n    items: []\n  },\n  perf_and_observability: {\n    id: 6,\n    name: \"Performance&Observability\",\n    description: \"Responsible for ensuring system performance, monitoring, reliability, and application observability to maintain optimal user experience.\",\n    items: []\n  },\n  devops: {\n    id: 7,\n    name: \"DevOps\",\n    description: \"Handles the infrastructure, CI/CD pipelines, deployment automation, and system reliability to support continuous development and operations.\",\n    items: []\n  }\n};\nfunction populateColumnsTest(columns, data) {\n  if (!Array.isArray(data) || typeof columns !== 'object') {\n    throw new Error(\"Invalid input: columns must be an object and data must be an array\");\n  }\n  const columnKeys = Object.keys(columns);\n  data.forEach(ticket => {\n    const randomKey = columnKeys[Math.floor(Math.random() * columnKeys.length)];\n    columns[randomKey].items.push(ticket.id);\n  });\n  return columns;\n}\n\n// fake data generator\nconst getItems = (count, offset = 0) => Array.from({\n  length: count\n}, (v, k) => k).map(k => ({\n  id: `item-${k + offset}-${new Date().getTime()}`,\n  content: `item ${k + offset}`\n}));\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n  destClone.splice(droppableDestination.index, 0, removed);\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n  return result;\n};\nconst getItemStyle = (isDragging, draggableStyle, severity) => ({\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : appsmith.model.color_utils.severityColors[severity || \"na\"],\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\nconst getListStyle = isDraggingOver => ({\n  //background: isDraggingOver ? \"lightblue\" : \"lightgrey\"\n});\nfunction populateColumns(data) {\n  const productAreasMap = {};\n\n  // Initialize product areas with empty items array\n  data.product_areas.forEach(area => {\n    productAreasMap[area.scenario] = {\n      id: area.id,\n      name: area.scenario,\n      items: []\n    };\n  });\n\n  // Distribute tickets across their product areas\n  data.tickets.forEach(ticket => {\n    if (!ticket.product_area) return;\n    const areaNames = ticket.product_area.split(',').map(name => name.trim());\n    areaNames.forEach(areaName => {\n      //if (!productAreasMap[areaName]) {\n      //  productAreasMap[areaName] = {\n      //    id: null,\n      //    name: areaName,\n      //    items: []\n      //  };\n      //}\n\n      productAreasMap[areaName].items.push(ticket);\n    });\n  });\n\n  // Remove product areas with no items\n  Object.keys(productAreasMap).forEach(areaName => {\n    if (productAreasMap[areaName].items.length === 0) {\n      delete productAreasMap[areaName];\n    }\n  });\n  return productAreasMap;\n}\nfunction App() {\n  const [columns, setColumns] = React.useState(populateColumns(appsmith.model));\n  console.log(columns);\n  function onDragEnd(result) {\n    const {\n      source,\n      destination\n    } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n    const sourceColId = source.droppableId;\n    const destColId = destination.droppableId;\n    if (sourceColId === destColId) {\n      const items = reorder(columns[sourceColId].items, source.index, destination.index);\n      setColumns({\n        ...columns,\n        [sourceColId]: {\n          ...columns[sourceColId],\n          items\n        }\n      });\n    } else {\n      const result = move(columns[sourceColId].items, columns[destColId].items, source, destination);\n      setColumns({\n        ...columns,\n        [sourceColId]: {\n          ...columns[sourceColId],\n          items: result[sourceColId]\n        },\n        [destColId]: {\n          ...columns[destColId],\n          items: result[destColId]\n        }\n      });\n    }\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      gap: \"8px\"\n    }\n  }, /*#__PURE__*/React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd\n  }, Object.entries(columns).map(([key, el]) => /*#__PURE__*/React.createElement(Droppable, {\n    key: key,\n    droppableId: key\n  }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: provided.innerRef,\n    className: \"column\",\n    style: getListStyle(snapshot.isDraggingOver)\n  }, provided.droppableProps), /*#__PURE__*/React.createElement(\"h2\", null, key, \" (\", el.items.length, \")\"), el.items.map((item, index) => /*#__PURE__*/React.createElement(Draggable, {\n    key: item.id,\n    draggableId: item.id,\n    index: index\n  }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: provided.innerRef,\n    className: \"card\"\n  }, provided.draggableProps, provided.dragHandleProps, {\n    style: getItemStyle(snapshot.isDragging, provided.draggableProps.style, item.severity)\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-header\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"quote\"\n  }, item.subject.substring(0, 50) + \"...\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"severity-label\"\n  }, item.severity), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-id\"\n  }, appsmith.model.ticket_constants.supportTiers[item.support_level] ?? \"N/A\")))), provided.placeholder)))));\n}\nappsmith.onReady(() => {\n  /*\n   * This handler function will get called when parent application is ready.\n   * Initialize your component here\n   * more info - https://docs.appsmith.com/reference/widgets/custom#onready\n   */\n  createRoot(document.getElementById(\"root\")).render(/*#__PURE__*/React.createElement(App, null));\n});"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 10,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": "/* General page style */\nbody {\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  //background-color: #4ea1f3;\n  margin: 0;\n  padding: 20px;\n  display: flex;\n  gap: 20px;\n  flex-wrap: wrap;\n}\n\n.column {\n  background-color:  #eee;\n  border-radius: 8px;\n  padding: 10px;\n  width: 250px;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n/* Column title */\n.column h2 {\n  margin: 0;\n  font-size: 20px;\n  font-weight: 700;\n}\n\n.card {\n  background-color: #ffffff;\n  border-radius: 8px;\n  padding: 10px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n\tuser-select: none;\n}\n\n/* Avatar and quote container */\n.card-header {\n  display: flex;\n  align-items: flex-start;\n  gap: 10px;\n}\n\n/* Round avatar */\n.avatar {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n}\n\n/* Quote text */\n.quote {\n  font-size: 16px;\n  font-weight: 500;\n  color: #1e1e1e;\n}\n\n.severity-label {\n  //background-color: #e2d9f3;\n  //color: #5f4b8b;\n  font-size: 14px;\n  padding: 3px 8px;\n  border-radius: 6px;\n  width: fit-content;\n\talign-self: flex-start;\n}\n\n/* ID in the bottom-right */\n.card-id {\n  font-size: 12px;\n  align-self: flex-end;\n}\n",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "import React from \"https://esm.sh/react@19.1.0\";\nimport {createRoot} from \"https://esm.sh/react-dom@19.1.0/client\";\nimport { DragDropContext, Droppable, Draggable } from \"https://esm.sh/@hello-pangea/dnd@18.0.1\";\n\nconst initialColumns = {\n    ai_agents: {\n      id: 1,\n      name: \"AI Agents\",\n      description: \"Responsible for the new AI Agent/Assistance builder\",\n\t\t\titems: []\n    },\n    query_and_widgets: {\n      id: 2,\n      name: \"Query&Widgets\",\n      description: \"Responsible for the developer experience, data sources, queries, JS, Widgets, Templates, Evaluation, and bindings.\",\n\t\t\titems: []\n    },\n    git_and_packages: {\n      id: 3,\n      name: \"Git&Packages\",\n      description: \"Responsible for Git integration, Import/Export of Apps and Packages/Modules\",\n\t\t\titems: []\n    },\n    chat_extension: {\n      id: 4,\n      name: \"Chat Extension\",\n      description: \"This is the old Workflow team. They are working on a new AI experience, but every workflow issue should go to this team.\",\n\t\t\titems: []\n    },\n    platform_admin: {\n      id: 5,\n      name: \"Platform Admin\",\n      description: \"They are responsible for all the Admin Settings, Billing, Audit Logs, and SSO integrations.\",\n\t\t\titems: []\n    },\n    perf_and_observability: {\n      id: 6,\n      name: \"Performance&Observability\",\n      description: \"Responsible for ensuring system performance, monitoring, reliability, and application observability to maintain optimal user experience.\",\n\t\t\titems: []\n    },\n    devops: {\n      id: 7,\n      name: \"DevOps\",\n      description: \"Handles the infrastructure, CI/CD pipelines, deployment automation, and system reliability to support continuous development and operations.\",\n\t\t\titems: []\n    }\n};\n\nfunction populateColumnsTest (columns, data) {\n\tif (!Array.isArray(data) || typeof columns !== 'object') {\n\t\tthrow new Error(\"Invalid input: columns must be an object and data must be an array\");\n\t}\n\t\n\tconst columnKeys = Object.keys(columns);\n\t\n\t data.forEach(ticket => {\n    const randomKey = columnKeys[Math.floor(Math.random() * columnKeys.length)];\n    columns[randomKey].items.push(ticket.id);\n  });\n\n  return columns;\n}\n\n// fake data generator\nconst getItems = (count, offset = 0) =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `item-${k + offset}-${new Date().getTime()}`,\n    content: `item ${k + offset}`\n  }));\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\nconst getItemStyle = (isDragging, draggableStyle, severity) => ({\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : appsmith.model.color_utils.severityColors[severity || \"na\"],\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  //background: isDraggingOver ? \"lightblue\" : \"lightgrey\"\n});\n\n\nfunction populateColumns(data) {\n  const productAreasMap = {};\n\n  // Initialize product areas with empty items array\n  data.product_areas.forEach(area => {\n    productAreasMap[area.scenario] = {\n      id: area.id,\n      name: area.scenario,\n      items: []\n    };\n  });\n\n  // Distribute tickets across their product areas\n  data.tickets.forEach(ticket => {\n    if (!ticket.product_area) return;\n\n    const areaNames = ticket.product_area.split(',').map(name => name.trim());\n\n    areaNames.forEach(areaName => {\n      //if (!productAreasMap[areaName]) {\n      //  productAreasMap[areaName] = {\n      //    id: null,\n      //    name: areaName,\n      //    items: []\n      //  };\n      //}\n\n      productAreasMap[areaName].items.push(ticket);\n    });\n  });\n\n  // Remove product areas with no items\n  Object.keys(productAreasMap).forEach(areaName => {\n    if (productAreasMap[areaName].items.length === 0) {\n      delete productAreasMap[areaName];\n    }\n  });\n\n  return productAreasMap;\n}\n\n\nfunction App() {\n  const [columns, setColumns] = React.useState(populateColumns(appsmith.model));\n\tconsole.log(columns);\n\n  function onDragEnd(result) {\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n  const sourceColId = source.droppableId;\n  const destColId = destination.droppableId;\n\n   if (sourceColId === destColId) {\n    const items = reorder(columns[sourceColId].items, source.index, destination.index);\n    setColumns({\n      ...columns,\n      [sourceColId]: {\n        ...columns[sourceColId],\n        items,\n      },\n    });\n  } else {\n    const result = move(\n      columns[sourceColId].items,\n      columns[destColId].items,\n      source,\n      destination\n    );\n\n    setColumns({\n      ...columns,\n      [sourceColId]: {\n        ...columns[sourceColId],\n        items: result[sourceColId],\n      },\n      [destColId]: {\n        ...columns[destColId],\n        items: result[destColId],\n      },\n    });\n  }\n  }\n\n  return (\n      <div style={{ display: \"flex\", gap: \"8px\" }}>\n        <DragDropContext onDragEnd={onDragEnd}>\n          {Object.entries(columns).map(([key, el]) => (\n            <Droppable key={key} droppableId={key}>\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n\t\t\t\t\t\t\t\t\tclassName=\"column\"\n                  style={getListStyle(snapshot.isDraggingOver)}\n                  {...provided.droppableProps}\n                >\n\t\t\t\t\t\t\t\t<h2>{key} ({el.items.length})</h2>\n                  {el.items.map((item, index) => (\n                    <Draggable\n                      key={item.id}\n                      draggableId={item.id}\n                      index={index}\n                    >\n                      {(provided, snapshot) => (\n                        <div\n                          ref={provided.innerRef}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"card\"\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          style={getItemStyle(\n                            snapshot.isDragging,\n                            provided.draggableProps.style,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\titem.severity\n                          )}\n                        >\n                          <div\n                            className=\"card-header\"\n                          >\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t <div className=\"quote\">\n                            {item.subject.substring(0,50)+\"...\"}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n                          </div>\n<div className=\"severity-label\">\n\t{item.severity}\n</div>\n<div className=\"card-id\">{appsmith.model.ticket_constants.supportTiers[item.support_level] ?? \"N/A\"}</div>\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          ))}\n        </DragDropContext>\n      </div>\n  );\n}\n\nappsmith.onReady(() => {\n\t/*\n\t * This handler function will get called when parent application is ready.\n\t * Initialize your component here\n\t * more info - https://docs.appsmith.com/reference/widgets/custom#onready\n\t */\n\tcreateRoot(document.getElementById(\"root\")).render(<App />);\n});"
  },
  "version": 1,
  "widgetId": "5gn7lu5cc6",
  "widgetName": "kanban_board"
}